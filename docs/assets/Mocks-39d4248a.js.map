{"version":3,"file":"Mocks-39d4248a.js","sources":["../../src/base-port-picker.ts","../../src/stories/Mocks.ts"],"sourcesContent":["import { LitElement, html } from \"lit\";\r\nimport { property, state } from \"lit/decorators.js\";\r\nimport { MidiAccess } from \"shimi\";\r\n\r\nexport abstract class BasePortPicker extends LitElement {\r\n\r\n    /**\r\n     * Holds a reference to the MidiAccess object used to fetch MIDI ports\r\n     * Setting this property manages a subscription to the MidiAccess.portChanged event\r\n     * This must be set for the picker to be in any way useful\r\n     */\r\n    @property({attribute: false})\r\n    private _midiAccess: MidiAccess | null = null;\r\n    get midiAccess(): MidiAccess | null { return this._midiAccess; }\r\n    set midiAccess(value: MidiAccess | null) {\r\n        if (value === this._midiAccess)\r\n            return;\r\n        if (this._midiAccess != null)\r\n            this._midiAccess.portChanged.remove(x => x.logic === this._onMidiAccessPortChange);\r\n        this._midiAccess = value;\r\n        if (this._midiAccess != null)\r\n            this._midiAccess.portChanged.add(this._onMidiAccessPortChange);\r\n        this._propogatePortChange();\r\n    }\r\n\r\n    /**\r\n     * The name of the selected port\r\n     */\r\n    @property({attribute: 'port'})\r\n    private _port: string = '';\r\n    get port() { return this._port; }\r\n    set port(value: string) {\r\n        if (value == this._port)\r\n            return;\r\n        this._port = value;\r\n        this._propogatePortChange();\r\n    }\r\n\r\n    @state()\r\n    private _selectedMidiPortObject: any | null = null;\r\n\r\n    private _portIsValid(): boolean {\r\n        return !!this._getPortNames().find(x => x == this.port);\r\n    }\r\n\r\n    abstract _getPortNames(): Array<string>;\r\n\r\n    abstract _getPortObject(portName: string): any;\r\n\r\n    abstract _updateMidiIOObject(portObject: any): void;\r\n\r\n    //Gets called when a port has been added to/removed from the connected midi access object\r\n    private _onMidiAccessPortChange = () => {\r\n        this.requestUpdate();\r\n    }\r\n\r\n    //Gets called when a new port name is chosen through the select dropdown\r\n    private _onSelectedPortChange(evt: Event): void {\r\n        const select = evt.target as HTMLSelectElement;\r\n        this.port = select.value;\r\n    }\r\n\r\n    //Responds to a change on one of the properties\r\n    //Tries to find the actual port object with that name\r\n    //Will update the midiIn, if its been set\r\n    //and dispatch a port-change event if the value is different than it was before\r\n    protected _propogatePortChange(): void {\r\n        const newValue = this._getPortObject(this.port);\r\n        this._updateMidiIOObject(newValue);\r\n        if (newValue == this._selectedMidiPortObject)\r\n            return;\r\n        this._selectedMidiPortObject = newValue;\r\n        this.dispatchEvent(new CustomEvent('port-change', {\r\n            detail: newValue,\r\n            bubbles: true,\r\n            composed: true\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        const me = this;\r\n        return html`\r\n            <select @change=${me._onSelectedPortChange}>\r\n                <option ?selected=${!me._portIsValid()}></option>\r\n                ${this._getPortNames().map(portName => html`\r\n                    <option ?selected=${me.port == portName}>${portName}</option>\r\n                `)}\r\n            </select>\r\n        `;\r\n    }\r\n\r\n    /** This causes the component to be rendered in the light DOM. Meaning that the basic layout of the picker can be more easily styled. */\r\n    protected createRenderRoot(): Element | ShadowRoot {\r\n        return this;\r\n    }\r\n\r\n}","import { MidiAccessPortEvent, MidiAccessPortEventData } from 'shimi';\r\n\r\n\r\nexport function newMockMidiAccess(): any {\r\n    return {\r\n        portChanged: new MidiAccessPortEvent(),\r\n\r\n        getOutPort: function(portName: string): any {\r\n            return { name: portName }\r\n        },\r\n\r\n        getInPort: function(portName: string): any {\r\n            return { name: portName }\r\n        },\r\n\r\n        _outPortNames: ['Out Port 1', 'Out Port 2'],\r\n        getOutPortNames: function(): string[] {\r\n            return this._outPortNames;\r\n        },\r\n\r\n        _inPortNames: ['In Port 1', 'In Port 2'],\r\n        getInPortNames: function(): string[] {\r\n            return this._inPortNames;\r\n        },\r\n\r\n        mockAddOutPort: function(portName: string): void {\r\n            this._outPortNames.push(portName);\r\n            this.portChanged.trigger(new MidiAccessPortEventData(this, this.getOutPort(portName)));\r\n        },\r\n\r\n        mockAddInPort: function(portName: string): void {\r\n            this._inPortNames.push(portName);\r\n            this.portChanged.trigger(new MidiAccessPortEventData(this, this.getInPort(portName)));\r\n        }\r\n    };\r\n}"],"names":["BasePortPicker","LitElement","value","x","evt","select","newValue","me","html","portName","__decorateClass","property","state","newMockMidiAccess","MidiAccessPortEvent","MidiAccessPortEventData"],"mappings":"2SAIO,MAAeA,UAAuBC,CAAW,CAAjD,aAAA,CAAA,MAAA,GAAA,SAAA,EAQH,KAAQ,YAAiC,KAiBzC,KAAQ,MAAgB,GAUxB,KAAQ,wBAAsC,KAa9C,KAAQ,wBAA0B,IAAM,CACpC,KAAK,cAAc,CAAA,CACvB,CAzCA,IAAI,YAAgC,CAAE,OAAO,KAAK,WAAa,CAC/D,IAAI,WAAWC,EAA0B,CACjCA,IAAU,KAAK,cAEf,KAAK,aAAe,MACpB,KAAK,YAAY,YAAY,UAAYC,EAAE,QAAU,KAAK,uBAAuB,EACrF,KAAK,YAAcD,EACf,KAAK,aAAe,MACpB,KAAK,YAAY,YAAY,IAAI,KAAK,uBAAuB,EACjE,KAAK,qBAAqB,EAC9B,CAOA,IAAI,MAAO,CAAE,OAAO,KAAK,KAAO,CAChC,IAAI,KAAKA,EAAe,CAChBA,GAAS,KAAK,QAElB,KAAK,MAAQA,EACb,KAAK,qBAAqB,EAC9B,CAKQ,cAAwB,CACrB,MAAA,CAAC,CAAC,KAAK,gBAAgB,KAAKC,GAAKA,GAAK,KAAK,IAAI,CAC1D,CAcQ,sBAAsBC,EAAkB,CAC5C,MAAMC,EAASD,EAAI,OACnB,KAAK,KAAOC,EAAO,KACvB,CAMU,sBAA6B,CACnC,MAAMC,EAAW,KAAK,eAAe,KAAK,IAAI,EAC9C,KAAK,oBAAoBA,CAAQ,EAC7BA,GAAY,KAAK,0BAErB,KAAK,wBAA0BA,EAC1B,KAAA,cAAc,IAAI,YAAY,cAAe,CAC9C,OAAQA,EACR,QAAS,GACT,SAAU,EACb,CAAA,CAAC,EACN,CAEA,QAAS,CACL,MAAMC,EAAK,KACJ,OAAAC;AAAAA,8BACeD,EAAG,qBAAqB;AAAA,oCAClB,CAACA,EAAG,cAAc;AAAA,kBACpC,KAAK,cAAgB,EAAA,IAAgBE,GAAAD;AAAAA,wCACfD,EAAG,MAAQE,CAAQ,IAAIA,CAAQ;AAAA,iBACtD,CAAC;AAAA;AAAA,SAGd,CAGU,kBAAyC,CACxC,OAAA,IACX,CAEJ,CApFYC,EAAA,CADPC,EAAS,CAAC,UAAW,GAAM,CAAA,EAPVX,EAQV,UAAA,cAAA,CAAA,EAiBAU,EAAA,CADPC,EAAS,CAAC,UAAW,OAAO,CAAA,EAxBXX,EAyBV,UAAA,QAAA,CAAA,EAUAU,EAAA,CADPE,EAAM,CAAA,EAlCWZ,EAmCV,UAAA,0BAAA,CAAA,ECpCL,SAASa,GAAyB,CAC9B,MAAA,CACH,YAAa,IAAIC,EAAAA,oBAEjB,WAAY,SAASL,EAAuB,CACjC,MAAA,CAAE,KAAMA,EACnB,EAEA,UAAW,SAASA,EAAuB,CAChC,MAAA,CAAE,KAAMA,EACnB,EAEA,cAAe,CAAC,aAAc,YAAY,EAC1C,gBAAiB,UAAqB,CAClC,OAAO,KAAK,aAChB,EAEA,aAAc,CAAC,YAAa,WAAW,EACvC,eAAgB,UAAqB,CACjC,OAAO,KAAK,YAChB,EAEA,eAAgB,SAASA,EAAwB,CACxC,KAAA,cAAc,KAAKA,CAAQ,EAC3B,KAAA,YAAY,QAAQ,IAAIM,EAAA,wBAAwB,KAAM,KAAK,WAAWN,CAAQ,CAAC,CAAC,CACzF,EAEA,cAAe,SAASA,EAAwB,CACvC,KAAA,aAAa,KAAKA,CAAQ,EAC1B,KAAA,YAAY,QAAQ,IAAIM,EAAA,wBAAwB,KAAM,KAAK,UAAUN,CAAQ,CAAC,CAAC,CACxF,CAAA,CAER"}