import{s as u,x as a}from"./lit-element-b97bcfb0.js";import{r as _,n as p,d as c}from"./index-894feb9a.js";var P=Object.defineProperty,g=Object.getOwnPropertyDescriptor,h=(e,t,s,i)=>{for(var r=i>1?void 0:i?g(t,s):t,o=e.length-1,n;o>=0;o--)(n=e[o])&&(r=(i?n(t,s,r):n(r))||r);return i&&r&&P(t,s,r),r};class d extends u{constructor(){super(...arguments),this._midiAccess=null,this._port="",this._selectedMidiPortObject=null,this._onMidiAccessPortChange=()=>{this.requestUpdate()}}get midiAccess(){return this._midiAccess}set midiAccess(t){t!==this._midiAccess&&(this._midiAccess!=null&&this._midiAccess.portChanged.remove(s=>s.logic===this._onMidiAccessPortChange),this._midiAccess=t,this._midiAccess!=null&&this._midiAccess.portChanged.add(this._onMidiAccessPortChange),this._propogatePortChange())}get port(){return this._port}set port(t){t!=this._port&&(this._port=t,this._propogatePortChange())}_portIsValid(){return!!this._getPortNames().find(t=>t==this.port)}_onSelectedPortChange(t){const s=t.target;this.port=s.value}_propogatePortChange(){const t=this._getPortObject(this.port);this._updateMidiIOObject(t),t!=this._selectedMidiPortObject&&(this._selectedMidiPortObject=t,this.dispatchEvent(new CustomEvent("port-change",{detail:t,bubbles:!0,composed:!0})))}render(){const t=this;return a`
            <select @change=${t._onSelectedPortChange}>
                <option ?selected=${!t._portIsValid()}></option>
                ${this._getPortNames().map(s=>a`
                    <option ?selected=${t.port==s}>${s}</option>
                `)}
            </select>
        `}createRenderRoot(){return this}}h([p({attribute:!1})],d.prototype,"_midiAccess",2);h([p({attribute:"port"})],d.prototype,"_port",2);h([_()],d.prototype,"_selectedMidiPortObject",2);function f(){return{portChanged:new c.MidiAccessPortEvent,getOutPort:function(e){return{name:e}},getInPort:function(e){return{name:e}},_outPortNames:["Out Port 1","Out Port 2"],getOutPortNames:function(){return this._outPortNames},_inPortNames:["In Port 1","In Port 2"],getInPortNames:function(){return this._inPortNames},mockAddOutPort:function(e){this._outPortNames.push(e),this.portChanged.trigger(new c.MidiAccessPortEventData(this,this.getOutPort(e)))},mockAddInPort:function(e){this._inPortNames.push(e),this.portChanged.trigger(new c.MidiAccessPortEventData(this,this.getInPort(e)))}}}export{d as B,f as n};
